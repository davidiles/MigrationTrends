
    
    model {
      
      #---------------------------------------------
      # Model for population dynamics
      #---------------------------------------------

      # Shared trend and annual noise
      log.trend ~ dnorm(0,1)
      proc.sd ~ dunif(0,2)
      proc.tau <- pow(proc.sd,-2)
      
      # Separate intercepts for each sub-area within a station
      for (A in 1:narea){
        intercept[A] ~ dunif(0,upper_limit*5)
        log.intercept[A] <- log(intercept[A])
        
        for (y in 1:nyear){
        
          mu[A,y] <- log.intercept[A] + log.trend*(y-1)
          logN[A,y] <- mu[A,y] + noise[A,y]
          noise[A,y] ~ dnorm(0,proc.tau)
          N[A,y] <- exp(logN[A,y])
        
        } # close year loop
      }
      
      for (y in 1:nyear){
        N.total[y] <- sum(N[,y])
      }
      
      
      #---------------------------------------------
      # Model for daily counts
      #---------------------------------------------

      for (A in 1:narea){
        daily.noise.sd[A] ~ dunif(0,2)
        daily.noise.tau[A] <- pow(daily.noise.sd[A],-2)
        
        mean.migrate[A] ~ dunif(1,nday)
        sd.migrate[A] ~ dunif(0,nday)
          
        for (y in 1:nyear){
            for (d in 1:nday){
              
              norm.density[A,d,y] <- 1/(sqrt(2*pi)*sd.migrate[A])*exp(-((d-mean.migrate[A])^2/(2*sd.migrate[A]^2)))
              
              # Expected count on each day
              expected.count[A,d,y] <- norm.density[A,d,y] * N[A,y]
              
              # Daily observation error
              daily.noise[A,d,y] ~ dnorm(0,daily.noise.tau[A])
              
              log.lambda[A,d,y] <- log(expected.count[A,d,y]) + daily.noise[A,d,y]
              
            } # close day loop
            
          } # close year loop
      
      } # close area loop
      
      for (i in 1:nobs){
        log.lam[i] <- log.lambda[area[i],day[i],year[i]] + log.offset[i]
        lam[i] <- exp(log.lam[i])
        daily.count[i] ~ dpois(lam[i])
      }
      
      
      # #---------------------------------------------
      # # Goodness-of-fit
      # #---------------------------------------------
      # for (i in 1:nobs){
      #   
      #   #-----------------------------------------------
      #   # Assess fit at level 1 (deviations from lambda)
      #   #-----------------------------------------------
      #   sim.count.1[i] ~ dpois(lam[i])
      #   
      #   sqerror.obs.1[i] <- pow(daily.count[i] - lam[i], 2)
      #   sqerror.sim.1[i] <- pow(sim.count.1[i] - lam[i], 2)
      #   
      #   X2.obs.1[i]      <- sqerror.obs.1[i]/lam[i]
      #   X2.sim.1[i]      <- sqerror.sim.1[i]/lam[i]
      #   
      #   #-----------------------------------------------
      #   # Assess fit at level 2 (deviations from expected)
      #   #-----------------------------------------------
      #   sim.noise[i] ~ dnorm(0,daily.noise.tau)
      #   sim.count.2[i] ~ dpois(exp(log(expected[i]) + sim.noise[i]))
      #   
      #   sqerror.obs.2[i] <- pow(daily.count[i] - expected[i], 2)
      #   sqerror.sim.2[i] <- pow(sim.count.2[i] - expected[i], 2)
      #   
      #   X2.obs.2[i]      <- sqerror.obs.2[i]/expected[i]
      #   X2.sim.2[i]      <- sqerror.sim.2[i]/expected[i]
      #   
      # }
      # 
      # chi2.obs.1 <- sum(X2.obs.1[])
      # chi2.sim.1 <- sum(X2.sim.1[])
      # 
      # chi2.obs.2 <- sum(X2.obs.2[])
      # chi2.sim.2 <- sum(X2.sim.2[])
      
    }
    
