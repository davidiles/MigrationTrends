
    
    model {
      
      #---------------------------------------------
      # Model for population dynamics
      #---------------------------------------------

      # Trend and annual noise
      log.trend ~ dnorm(0,1)
      proc.sd ~ dunif(0,2)
      proc.tau <- pow(proc.sd,-2)
      

      intercept ~ dunif(0,upper_limit)
      log.intercept <- log(intercept)
        
      # Population trend model
      for (y in 1:nyear){
        
        mu[y] <- log.intercept + log.trend*(y-1)
        logN[y] <- mu[y] + noise[y]
        noise[y] ~ dnorm(0,proc.tau)
        N[y] <- exp(logN[y])

      } # close year loop

      #---------------------------------------------
      # Model for daily counts
      #---------------------------------------------

      # Parameters describing the mean date of migration, and variation in that peak date among years
      mean.migrate.HYPERMEAN ~ dunif(1,nday)
      mean.migrate.HYPERSD ~ dunif(0,nday)
      mean.migrate.HYPERTAU <- pow(mean.migrate.HYPERSD, -2)
      
      # Parameter describing the width of the migration window (assume this window is constant)
      sd.migrate ~ dunif(0,nday)
         
      # Magnitude of dailyobservation error
      daily.noise.sd ~ dunif(0,2)
      daily.noise.tau <- pow(daily.noise.sd,-2)
      
        for (y in 1:nyear){
        
        # Different migration periods for each year (drawn from a shared distribution)
        mean.migrate[y] ~ dnorm(mean.migrate.HYPERMEAN, mean.migrate.HYPERTAU)

        for (d in 1:nday){
              
            # Each day within each year, estimate the proportion of total annual detections.
            norm.density[d,y] <- 1/(sqrt(2*pi)*sd.migrate)*exp(-((d-mean.migrate[y])^2/(2*sd.migrate^2)))
              
            # Expected count on each day (probability density * total abundance)
            expected.count[d,y] <- norm.density[d,y] * N[y]
              
            # Daily observation error (some days have higher/lower counts than expected)
            daily.noise[d,y] ~ dnorm(0, daily.noise.tau)
            log.lambda[d,y] <- log(expected.count[d,y]) + daily.noise[d,y]
              
          } # close day loop
            
      } # close year loop 
      
      
      # Observation model
      for (i in 1:nobs){
        lam[i] <- exp(log.lambda[day[i],year[i]])
        daily.count[i] ~ dpois(lam[i])
      }
      
      
    }
    
